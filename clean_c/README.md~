# TT-Metal Docker Development Environment

A fully self-contained Docker environment for building and developing with TT-Metal and TT-Train. This setup can be built on any machine, with or without Tenstorrent hardware.

## Features

- **Self-contained build**: No host dependencies required
- **Hardware-agnostic**: Build on any machine, run with or without TT hardware
- **Complete environment**: Includes all dependencies, tools, and libraries
- **SSH authentication**: Uses `git@github.com:` for all Git operations
- **DPRINT enabled**: Debug printing support configured
- **Python venv alias**: Quick activation with `tt-venv` command
- **Persistent storage**: CCCache and workspace data persist between runs

## Prerequisites

- Docker installed on your system
- SSH key configured for GitHub access (for private repositories)
- (Optional) Tenstorrent hardware and drivers for hardware testing

## Quick Start

### 1. Setup SSH Agent (for private repo access)

```bash
eval $(ssh-agent)
ssh-add ~/.ssh/your_github_key
```

### 2. Build the Docker Image

```bash
chmod +x build.sh
./build.sh
```

This will create a Docker image with:
- Ubuntu 22.04 (upgraded)
- All TT-Metal dependencies
- TT-Metal built in debug mode with all components
- TT-Train (if accessible)
- GDB 15.1 for debugging
- TT-SMI monitoring tools

**Note**: The build process takes 20-30 minutes on first run due to compilation.

### 3. Run the Container

#### With Tenstorrent Hardware:
```bash
chmod +x run.sh
./run.sh
```

#### Without Hardware (Software Development Only):
```bash
./run.sh --no-device
```

#### Run a Specific Command:
```bash
./run.sh --command "python3 /workspace/tt-metal/tests/test_example.py"
```

### 4. Inside the Container

Activate the Python environment:
```bash
tt-venv  # Alias to activate tt-metal virtual environment
```

Run TT-SMI monitoring:
```bash
cd /workspace/tt-smi
source .venv/bin/activate
tt-smi
```

## Directory Structure

Inside the container:
```
/workspace/
├── tt-metal/           # TT-Metal source and build
├── tt-train/           # TT-Train framework (if available)
├── tt-smi/             # System monitoring tools
├── persistent/         # Persistent storage between container runs
└── tt-metal-venv/      # Python virtual environment
```

## Environment Variables

The following environment variables are pre-configured:
- `TT_METAL_HOME=/workspace/tt-metal`
- `ENABLE_DPRINT=1`
- `TT_METAL_DPRINT_CORES=0`
- `ARCH_NAME=wormhole_b0`
- `PYTHONPATH` includes `/workspace/tt-metal`

## Building on Different Machines

This Docker setup is designed to be portable:

1. **Development Machine (no TT hardware)**: 
   - Build and compile code
   - Run unit tests that don't require hardware
   - Develop and debug software

2. **Testing Machine (with TT hardware)**:
   - Run the same container with `--privileged` flag
   - Full hardware access for testing
   - Same environment ensures consistency

## Persistent Data

Two Docker volumes are created for persistence:
- `tt-metal-ccache`: Stores ccache data for faster rebuilds
- `tt-metal-workspace`: Stores persistent workspace data

To clean up volumes:
```bash
docker volume rm tt-metal-ccache tt-metal-workspace
```

## Troubleshooting

### SSH Key Issues
If you get "Permission denied (publickey)" errors:
```bash
# Ensure SSH agent is running
eval $(ssh-agent)
# Add your GitHub SSH key
ssh-add ~/.ssh/id_rsa  # or your key path
# Verify
ssh-add -l
```

### Container Already Exists
The run script will ask if you want to remove an existing container. You can also manually remove it:
```bash
docker rm -f tt-metal-dev
```

### Hardware Not Detected
If running on a machine with TT hardware but it's not detected:
```bash
# Check if kernel module is loaded
lsmod | grep tenstorrent
# Load if necessary
sudo modprobe tenstorrent
```

## Advanced Usage

### Docker Compose Alternative
Use the provided `docker-compose.yml` for more complex setups:
```bash
docker-compose up -d
docker-compose exec tt-metal bash
```

### Mounting Local Source
To use local source code instead of the built-in version:
```bash
docker run -it \
    -v /path/to/local/tt-metal:/workspace/tt-metal \
    -v /path/to/local/tt-train:/workspace/tt-train \
    tt-metal:latest \
    /bin/bash
```

### Custom Build Arguments
Modify the Dockerfile's build command for different configurations:
- Change `--debug` to `--release` for release builds
- Remove `--build-all` to build only core components
- Adjust `ARCH_NAME` for different architectures

## Security Notes

- SSH keys are mounted read-only
- Git config is mounted read-only
- Container runs privileged only when hardware access is needed
- No sensitive data is baked into the image

## Support

For issues specific to this Docker setup, check:
1. Docker logs: `docker logs tt-metal-dev`
2. Build output for compilation errors
3. Ensure all prerequisites are met

For TT-Metal specific issues, refer to the official Tenstorrent documentation.

