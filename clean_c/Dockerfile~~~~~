# Dockerfile for TT-Metal and TT-Train - Fully Self-Contained Build
FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install base system packages
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y \
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    git \
    git-lfs \
    cargo \
    wget \
    curl \
    libstdc++-12-dev \
    libmpfr-dev \
    ccache \
    build-essential \
    cmake \
    ninja-build \
    libyaml-cpp-dev \
    libboost-all-dev \
    libgtest-dev \
    libhwloc-dev \
    libssl-dev \
    pkg-config \
    software-properties-common \
    sudo \
    vim \
    openssh-client \
    libnuma-dev \
    libgmp-dev \
    libmpc-dev \
    libisl-dev \
    libzip-dev \
    libtinfo5 \
    libxml2-dev \
    libzmq3-dev \
    direnv \
    gdb \
    && rm -rf /var/lib/apt/lists/*

# Install CMake 3.30 (required by tt-metal)
RUN wget https://github.com/Kitware/CMake/releases/download/v3.30.0/cmake-3.30.0-linux-x86_64.tar.gz && \
    tar -xzf cmake-3.30.0-linux-x86_64.tar.gz && \
    cp -r cmake-3.30.0-linux-x86_64/* /usr/local/ && \
    rm -rf cmake-3.30.0-linux-x86_64 cmake-3.30.0-linux-x86_64.tar.gz

# Install Python packages globally
RUN pip3 install --upgrade pip && \
    pip3 install numpy wheel setuptools

# Create working directory
WORKDIR /workspace

# Setup SSH for GitHub
RUN mkdir -p /root/.ssh && \
    ssh-keyscan github.com >> /root/.ssh/known_hosts

# Clone tt-smi
RUN --mount=type=ssh git clone git@github.com:tenstorrent/tt-smi.git

# Setup tt-smi
RUN cd tt-smi && \
    python3 -m venv .venv && \
    . .venv/bin/activate && \
    pip3 install --upgrade pip && \
    pip install . && \
    deactivate

# Clone tt-metal repository with all submodules
RUN --mount=type=ssh \
    git clone git@github.com:tenstorrent/tt-metal.git && \
    cd tt-metal && \
    git submodule update --init --recursive && \
    git submodule foreach 'git lfs fetch --all && git lfs pull'

# Setup tt-metal build environment
WORKDIR /workspace/tt-metal

# Set environment variables for build
ENV ARCH_NAME=wormhole_b0
ENV TT_METAL_HOME=/workspace/tt-metal
ENV PYTHONPATH=/workspace/tt-metal
ENV TT_METAL_DPRINT_CORES=0,0
ENV ENABLE_DPRINT=1

# Build tt-metal in debug mode with all components
RUN ./build_metal.sh --debug --build-all --enable-ccache

# Setup Python virtual environment for tt-metal
RUN python3 -m venv /workspace/tt-metal-venv && \
    . /workspace/tt-metal-venv/bin/activate && \
    pip install --upgrade pip && \
    pip install -e . && \
    if [ -f requirements.txt ]; then pip install -r requirements.txt; fi && \
    if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi && \
    deactivate

# Build tt-train if it exists as subfolder
WORKDIR /workspace/tt-metal/tt-train
RUN if [ -f init_repo.sh ]; then \
    . ./init_repo.sh || true; \
    fi && \
    if [ -f CMakeLists.txt ]; then \
    cmake -DCMAKE_BUILD_TYPE=Debug -B build-debug -GNinja && \
    cmake --build build-debug --config Debug && \
    cmake -DCMAKE_BUILD_TYPE=Release -B build-release -GNinja && \
    cmake --build build-release --config Release; \
    fi

# Install additional Python packages for tt-train
RUN . /workspace/tt-metal-venv/bin/activate && \
    pip install wandb msgpack-python && \
    deactivate

# Setup environment in bashrc
RUN echo 'export ARCH_NAME=wormhole_b0' >> /root/.bashrc && \
    echo 'export TT_METAL_DPRINT_CORES=0,0' >> /root/.bashrc && \
    echo 'export TT_METAL_HOME=/workspace/tt-metal' >> /root/.bashrc && \
    echo 'export PYTHONPATH=/workspace/tt-metal' >> /root/.bashrc && \
    echo 'export PATH="/usr/local/bin:$PATH"' >> /root/.bashrc && \
    echo 'alias tt-venv="source /workspace/tt-metal-venv/bin/activate"' >> /root/.bashrc && \
    echo 'echo "TT-Metal Development Environment"' >> /root/.bashrc && \
    echo 'echo "Run tt-venv to activate the Python environment"' >> /root/.bashrc

# Default working directory
WORKDIR /workspace/tt-metal

# Default command
CMD ["/bin/bash"]

