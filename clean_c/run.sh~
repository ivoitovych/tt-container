#!/bin/bash
# Run script for TT-Metal Docker container
# Supports both hardware-enabled and software-only modes

set -e

DOCKER_IMAGE_NAME="tt-metal"
DOCKER_IMAGE_TAG="latest"
CONTAINER_NAME="tt-metal-dev"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Parse command line arguments
NO_DEVICE=false
INTERACTIVE=true
COMMAND=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --no-device)
            NO_DEVICE=true
            shift
            ;;
        --command)
            INTERACTIVE=false
            COMMAND="$2"
            shift 2
            ;;
        --help)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --no-device       Run without Tenstorrent hardware (software development only)"
            echo "  --command CMD     Run a specific command instead of interactive shell"
            echo "  --help            Show this help message"
            echo ""
            echo "Examples:"
            echo "  $0                          # Run with hardware access (if available)"
            echo "  $0 --no-device              # Run without hardware for development"
            echo "  $0 --command 'python3 test.py'  # Run a specific command"
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

echo -e "${BLUE}Starting TT-Metal Docker container...${NC}"

# Check if the Docker image exists
if ! docker image inspect ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} &>/dev/null; then
    echo -e "${RED}Error: Docker image ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} not found.${NC}"
    echo "Please build the image first using: ./build.sh"
    exit 1
fi

# Prepare device access flags
DEVICE_FLAGS=""
DEVICE_STATUS="without hardware access"

if [ "$NO_DEVICE" = false ]; then
    # Check if the Tenstorrent device exists
    if [ -e /dev/tenstorrent ]; then
        # Check if the kernel module is loaded
        if lsmod | grep -q tenstorrent; then
            DEVICE_FLAGS="--privileged --device /dev/tenstorrent:/dev/tenstorrent"
            DEVICE_STATUS="with hardware access"
            echo -e "${GREEN}Tenstorrent hardware detected and will be accessible in container${NC}"
        else
            echo -e "${YELLOW}Warning: Tenstorrent device exists but kernel module not loaded${NC}"
            echo "To load: sudo modprobe tenstorrent"
            echo -e "${YELLOW}Running in software-only mode${NC}"
        fi
    else
        echo -e "${YELLOW}No Tenstorrent hardware detected - running in software-only mode${NC}"
    fi
else
    echo -e "${BLUE}Running in software-only mode (--no-device specified)${NC}"
fi

# Check if container is already running
if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
    echo -e "${YELLOW}Container ${CONTAINER_NAME} already exists.${NC}"
    read -p "Do you want to remove it and start fresh? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker rm -f ${CONTAINER_NAME}
    else
        echo "Attaching to existing container..."
        if [ "$INTERACTIVE" = true ]; then
            docker exec -it ${CONTAINER_NAME} /bin/bash
        else
            docker exec ${CONTAINER_NAME} /bin/bash -c "$COMMAND"
        fi
        exit 0
    fi
fi

# Prepare SSH forwarding if available
SSH_FLAGS=""
if [ -n "$SSH_AUTH_SOCK" ]; then
    SSH_AUTH_SOCK_DIR=$(dirname $SSH_AUTH_SOCK)
    SSH_FLAGS="-v ${SSH_AUTH_SOCK_DIR}:${SSH_AUTH_SOCK_DIR} -e SSH_AUTH_SOCK=${SSH_AUTH_SOCK}"
fi

# Prepare interactive flags
INTERACTIVE_FLAGS=""
if [ "$INTERACTIVE" = true ]; then
    INTERACTIVE_FLAGS="-it"
fi

# Build the docker run command
DOCKER_CMD="docker run ${INTERACTIVE_FLAGS} \
    --name ${CONTAINER_NAME} \
    --network host \
    --ipc host \
    ${DEVICE_FLAGS} \
    ${SSH_FLAGS} \
    -v ${HOME}/.ssh:/root/.ssh:ro \
    -v ${HOME}/.gitconfig:/root/.gitconfig:ro \
    -e TT_METAL_DPRINT_CORES=0 \
    -e ENABLE_DPRINT=1 \
    -e TT_METAL_HOME=/workspace/tt-metal \
    -e PYTHONPATH=/workspace/tt-metal:\$PYTHONPATH \
    -e ARCH_NAME=wormhole_b0 \
    -v tt-metal-ccache:/root/.ccache \
    -v tt-metal-workspace:/workspace/persistent \
    -w /workspace \
    ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"

# Add the appropriate command
if [ "$INTERACTIVE" = true ]; then
    DOCKER_CMD="$DOCKER_CMD /bin/bash -c \"
        echo -e '${GREEN}═══════════════════════════════════════════════════════════════${NC}'
        echo -e '${GREEN}   TT-Metal Development Container${NC}'
        echo -e '${GREEN}   Running ${DEVICE_STATUS}${NC}'
        echo -e '${GREEN}═══════════════════════════════════════════════════════════════${NC}'
        echo ''
        echo -e '${BLUE}Available commands:${NC}'
        echo '  tt-venv              - Activate tt-metal Python virtual environment'
        echo '  tt-smi               - Run TT System Management Interface'
        echo '  gdb                  - GNU Debugger (v15.1)'
        echo ''
        echo -e '${BLUE}Directories:${NC}'
        echo '  /workspace/tt-metal       - TT-Metal source code'
        echo '  /workspace/tt-train       - TT-Train source code (if available)'
        echo '  /workspace/tt-smi         - TT-SMI tools'
        echo '  /workspace/persistent     - Persistent storage between runs'
        echo ''
        echo -e '${BLUE}Environment:${NC}'
        echo '  TT_METAL_HOME=/workspace/tt-metal'
        echo '  ENABLE_DPRINT=1'
        echo '  ARCH_NAME=wormhole_b0'
        echo ''
        if [ '$NO_DEVICE' = 'true' ]; then
            echo -e '${YELLOW}Note: Running without hardware - simulation/compilation only${NC}'
            echo ''
        fi
        exec /bin/bash
    \""
else
    DOCKER_CMD="$DOCKER_CMD /bin/bash -c \"$COMMAND\""
fi

# Run the container
eval $DOCKER_CMD

if [ "$INTERACTIVE" = true ]; then
    echo -e "${GREEN}Container stopped.${NC}"
fi

