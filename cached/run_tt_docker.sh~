#!/bin/bash

# Default values
IMAGE_TAG="tt-metal-env"
CONTAINER_NAME="tt-metal-container"
CCACHE_HOST_DIR="$HOME/.ccache"
MOUNT_WORKSPACE=false
WORKSPACE_DIR="$(pwd)/workspace"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --image)
            IMAGE_TAG="$2"
            shift 2
            ;;
        --name)
            CONTAINER_NAME="$2"
            shift 2
            ;;
        --ccache-dir)
            CCACHE_HOST_DIR="$2"
            shift 2
            ;;
        --mount-workspace)
            MOUNT_WORKSPACE=true
            WORKSPACE_DIR="$2"
            shift 2
            ;;
        --built-debug)
            IMAGE_TAG="tt-metal-env-built-debug"
            shift
            ;;
        --built-release)
            IMAGE_TAG="tt-metal-env-built-release"
            shift
            ;;
        --with-ccache)
            IMAGE_TAG="${IMAGE_TAG}-ccache"
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            echo "Options:"
            echo "  --image TAG         Docker image tag to use"
            echo "  --name NAME         Container name"
            echo "  --ccache-dir DIR    Host ccache directory to mount"
            echo "  --mount-workspace DIR Mount host directory as workspace"
            echo "  --built-debug       Use pre-built debug image"
            echo "  --built-release     Use pre-built release image"
            echo "  --with-ccache       Use image with ccache support"
            echo "  -h, --help          Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Check if image exists
if ! docker images | grep -q "^${IMAGE_TAG}"; then
    echo "Error: Docker image '$IMAGE_TAG' not found!"
    echo "Available images:"
    docker images | grep "tt-metal-env" | awk '{print "  " $1 ":" $2}'
    echo ""
    echo "Build an image first using: ./build_tt_docker.sh"
    exit 1
fi

# Check if tenstorrent module is loaded
if ! lsmod | grep -q tenstorrent; then
    echo "Warning: tenstorrent kernel module is not loaded on the host."
    echo "You may need to run: sudo modprobe tenstorrent"
fi

# Check if the device exists
if [ ! -e /dev/tenstorrent ]; then
    echo "Warning: /dev/tenstorrent device not found!"
fi

echo "Running container:"
echo "  Image: $IMAGE_TAG"
echo "  Container name: $CONTAINER_NAME"

# Prepare volume mounts
VOLUME_MOUNTS=""

# Mount ccache if the image supports it
if [[ "$IMAGE_TAG" == *"ccache"* ]]; then
    mkdir -p "$CCACHE_HOST_DIR"
    VOLUME_MOUNTS="$VOLUME_MOUNTS -v $CCACHE_HOST_DIR:/ccache"
    echo "  Mounting ccache: $CCACHE_HOST_DIR -> /ccache"
fi

# Mount workspace if requested
if [ "$MOUNT_WORKSPACE" = "true" ]; then
    mkdir -p "$WORKSPACE_DIR"
    VOLUME_MOUNTS="$VOLUME_MOUNTS -v $WORKSPACE_DIR:/workspace/user"
    echo "  Mounting workspace: $WORKSPACE_DIR -> /workspace/user"
fi

# Run the container
docker run -it --rm \
    --name $CONTAINER_NAME \
    --privileged \
    --device=/dev/tenstorrent:/dev/tenstorrent \
    -v /dev:/dev \
    -v /sys:/sys \
    -v /lib/modules:/lib/modules:ro \
    -v /dev/hugepages:/dev/hugepages \
    --cap-add=ALL \
    --security-opt apparmor=unconfined \
    -e DISPLAY=$DISPLAY \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    $VOLUME_MOUNTS \
    $IMAGE_TAG

